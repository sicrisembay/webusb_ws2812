{"version":3,"sources":["components/webUsb/webUsbWs2812.js","components/webUsb/webUsbDevice.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["WebUsbWs2812","ledCount","frameSeq","ledColor","updateColor","id","r","g","b","Error","clear","led","flush","convertColorToPayload","payload","Uint8Array","getPacket","packetLen","length","newPacket","i","sum","connected","combinedPacket","packet","set","send","console","log","vid","intf","endPtIn","endPtOut","Port","device","requestPort","filters","navigator","usb","requestDevice","then","catch","error","getPorts","getDevices","devices","map","connect","readLoop","transferIn","result","data","open","configuration","selectConfiguration","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","disconnect","close","transferOut","this","App","state","displayColorPicker","color","a","connectButtonClick","webDevice","setState","handleClick","handleClose","handleChange","rgb","parseInt","styles","reactCSS","width","height","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","className","Navbar","Button","onClick","style","onChange","src","logo","alt","href","target","rel","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9367d7c8.chunk.js","sourcesContent":["import WebUsbDevice from './webUsbDevice';\r\n\r\nclass WebUsbWs2812 extends WebUsbDevice {\r\n    ledCount = 0;\r\n    frameSeq = 0;\r\n    ledColor = [];\r\n\r\n    constructor(ledCount) {\r\n        const webUsbDev_vid = 0xCAFE;\r\n        const webUsbDev_interface = 2;\r\n        const webUsbDev_EndPtIn = 3;\r\n        const webUsbDev_EndPtOut = 3;\r\n\r\n        super(webUsbDev_vid, webUsbDev_interface, webUsbDev_EndPtIn, webUsbDev_EndPtOut);\r\n\r\n        this.ledCount = ledCount;\r\n        this.frameSeq = 0;\r\n        \r\n        for(let i = 0; i < this.ledCount; i++) {\r\n            this.ledColor[i] = {};\r\n            this.ledColor[i].id = i;\r\n            this.ledColor[i].r = 0;\r\n            this.ledColor[i].g = 0;\r\n            this.ledColor[i].b = 0;\r\n        }\r\n        console.log(this)\r\n    }\r\n\r\n    updateColor = (id, r, g, b) => {\r\n        if(id >= this.ledCount) {\r\n            id = this.ledCount - 1;\r\n        }\r\n        if(id < 0) {\r\n            id = 0;\r\n        }\r\n        if(id < this.ledCount) {\r\n            this.ledColor[id].r = r;\r\n            this.ledColor[id].g = g;\r\n            this.ledColor[id].b = b;\r\n        } else {\r\n            throw Error(\"Invalid LED id: \" + id);\r\n        }\r\n    }\r\n\r\n    clear = () => {\r\n        for(let led = 0; led < this.ledCount; led++) {\r\n            this.ledColor[led].r = 0;\r\n            this.ledColor[led].g = 0;\r\n            this.ledColor[led].b = 0;\r\n        }\r\n    }\r\n\r\n    flush = () => {\r\n        let convertColorToPayload = (id, r, g, b) => {\r\n            const CMD_UPDATE_COLOR = 16;\r\n            let payloadLen = 6;\r\n            let payload = new Uint8Array(payloadLen);\r\n            payload[0] = CMD_UPDATE_COLOR;\r\n            payload[1] = id % 256;\r\n            payload[2] = (id >> 8) % 256;\r\n            payload[3] = r % 256;\r\n            payload[4] = g % 256;\r\n            payload[5] = b % 256;\r\n            \r\n            return payload\r\n        }\r\n\r\n        let getPacket = (payload) => {\r\n            const SZ_FRAME_OVERHEAD = 10;\r\n            let packetLen = payload.length + SZ_FRAME_OVERHEAD;\r\n            let newPacket = new Uint8Array(packetLen);\r\n            /* Sof */\r\n            newPacket[0] = 255;\r\n            /* Lenght */\r\n            newPacket[1] = packetLen % 256;\r\n            newPacket[2] = (packetLen >> 8) % 256;\r\n            newPacket[3] = (packetLen >> 16) % 256;\r\n            newPacket[4] = (packetLen >> 24) % 256;\r\n            /* Sequence */\r\n            newPacket[5] = (this.frameSeq) % 256;\r\n            newPacket[6] = (this.frameSeq >> 8) % 256;\r\n            newPacket[7] = (this.frameSeq >> 16) % 256;\r\n            newPacket[8] = (this.frameSeq >> 24) % 256;\r\n            this.frameSeq = this.frameSeq + 1;\r\n            /* payload */\r\n            for(let i = 0; i < payload.length; i++) {\r\n                newPacket[9+i] = (payload[i]) % 256;\r\n            }\r\n            /* Checksum */\r\n            let sum = 0;\r\n            for(let i = 0; i < (packetLen - 1); i++) {\r\n                sum = sum + newPacket[i];\r\n            }\r\n            newPacket[packetLen - 1] = (0 - sum) % 256;\r\n\r\n            return newPacket;\r\n        }\r\n\r\n        if(this.connected) {\r\n            let combinedPacket = [];\r\n            for (let i = 0; i < this.ledCount; i++) {\r\n                const payload = convertColorToPayload(this.ledColor[i].id, \r\n                                    this.ledColor[i].r,\r\n                                    this.ledColor[i].g,\r\n                                    this.ledColor[i].b);\r\n                const packet = getPacket(payload);\r\n                let newPacket = new Uint8Array(combinedPacket.length + packet.length);\r\n                newPacket.set(combinedPacket);\r\n                newPacket.set(packet, combinedPacket.length);\r\n                combinedPacket = newPacket;\r\n            }\r\n\r\n            this.send(combinedPacket);\r\n        }\r\n    }\r\n}\r\n\r\nexport default WebUsbWs2812;\r\n","class WebUsbDevice {\r\n    constructor(vid, intf, endPtIn, endPtOut) {\r\n        this.vid = vid;\r\n        this.intf = intf;\r\n        this.endPtIn = endPtIn;\r\n        this.endPtOut = endPtOut;\r\n        this.connected = false;\r\n    }\r\n\r\n    Port = (device) => {\r\n        this.device = device;\r\n        return this;\r\n    }\r\n\r\n    requestPort = () => {\r\n        const filters = [\r\n            { \"vendorId\" : this.vid},\r\n        ];\r\n        return navigator.usb.requestDevice({'filters':filters})\r\n        .then(device => {\r\n            this.Port(device);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    };\r\n\r\n    getPorts = () => {\r\n        return navigator.usb.getDevices()\r\n        .then(devices => {\r\n            return devices.map(device => {\r\n                return this.Port(device);\r\n            })\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    connect = () => {\r\n        let readLoop = () => {\r\n            this.device.transferIn(this.endPtIn, 64)\r\n            .then(result => {\r\n                console.log(result.data);\r\n                readLoop();\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n            \r\n        }\r\n\r\n        return this.device.open()\r\n            .then(() => {\r\n                if(this.device.configuration === null) {\r\n                    return this.device.selectConfiguration(1);\r\n                }\r\n            })\r\n            .then(() => {\r\n                let configurationInterfaces = this.device.configuration.interfaces;\r\n                configurationInterfaces.forEach(element => {\r\n                    element.alternates.forEach(elementalt => {\r\n                      if (elementalt.interfaceClass === 0xff) {\r\n                        this.intf = element.interfaceNumber;\r\n                        elementalt.endpoints.forEach(elementendpoint => {\r\n                          if (elementendpoint.direction === \"out\") {\r\n                            this.endPtOut = elementendpoint.endpointNumber;\r\n                          }\r\n                          if (elementendpoint.direction === \"in\") {\r\n                            this.endPtIn =elementendpoint.endpointNumber;\r\n                          }\r\n                        })\r\n                      }\r\n                    })\r\n                  })        \r\n            })\r\n            .then(() => this.device.claimInterface(this.intf))\r\n            .then(() => this.device.selectAlternateInterface(this.intf, 0))\r\n            .then(() => {\r\n                this.device.controlTransferOut({\r\n                        'requestType': 'class',\r\n                        'recipient': 'interface',\r\n                        'request': 0x22,\r\n                        'value': 0x01,\r\n                        'index': this.intf});\r\n                this.connected = true;\r\n            })\r\n            .then(() => {\r\n              readLoop();\r\n            })\r\n            .catch(error => {\r\n                this.connected = false;\r\n                console.log(error);\r\n            })  \r\n    }\r\n\r\n    disconnect = () => {\r\n        return this.device.controlTransferOut({\r\n            'requestType': 'class',\r\n            'recipient': 'interface',\r\n            'request': 0x22,\r\n            'value': 0x00,\r\n            'index': this.intf\r\n        })\r\n        .then(() => {\r\n            this.connected = false;\r\n            this.device.close();\r\n        })\r\n    }\r\n\r\n    send = (data) => {\r\n        return this.device.transferOut(this.endPtOut, data);\r\n    }\r\n}\r\n \r\nexport default WebUsbDevice;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport {Navbar, Button} from 'react-bootstrap';\nimport WebUsbWs2812 from './components/webUsb/webUsbWs2812'\nimport { SketchPicker } from 'react-color'\nimport reactCSS from 'reactcss'\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    displayColorPicker : false,\n    color : {\n      r: '241',\n      g: '112',\n      b: '19',\n      a: '1',\n    }\n  }\n  constructor() {\n    super();\n    this.webDevice = new WebUsbWs2812(24);\n  }\n\n  connectButtonClick = () => {\n    if(this.webDevice.connected) {\n      this.webDevice.disconnect()\n      .then(() => {\n          console.log(this);\n      })\n      .then(() => {\n          if(this.webDevice.connected) {\n              console.log(\"Connected.\")\n              this.setState({connected: true});\n          } else {\n              console.log(\"Disconnected.\")\n              this.setState({connected: false});\n          }\n      })\n      .catch(error => {\n          console.log(error);\n      })\n    } else {\n      this.webDevice.requestPort()\n      .then(() => {\n          this.webDevice.connect()\n          .then(() => {\n              console.log(this);\n          })\n          .then(() => {\n              if(this.webDevice.connected) {\n                  console.log(\"Connected.\")\n                  this.setState({connected: true});\n              } else {\n                  console.log(\"Disconnected.\")\n                  this.setState({connected: false});\n              }\n          })\n          .catch(error => {\n              console.log(error);\n          })\n      })\n      .catch(error => {\n          console.log(error);\n      })\n    }\n  }\n\n  handleClick = () => {\n    this.setState({displayColorPicker : !this.state.displayColorPicker});\n  }\n\n  handleClose = () => {\n    this.setState({displayColorPicker : false});\n  }\n\n  handleChange = (color) => {\n    console.log(color);\n    this.setState({color : color.rgb});\n    for(let led=0; led < this.webDevice.ledCount; led++) {\n      this.webDevice.updateColor(led,\n            parseInt(color.rgb.r, 10),\n            parseInt(color.rgb.g, 10),\n            parseInt(color.rgb.b, 10));\n    }\n    this.webDevice.flush();\n  }\n\n  render() {\n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: `rgba(${ this.state.color.r }, ${ this.state.color.g }, ${ this.state.color.b }, ${ this.state.color.a })`,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navbar>\n            <Button onClick={this.connectButtonClick}>\n              {\n                this.webDevice.connected ? 'Disconnect' : 'Connect'\n              }\n            </Button>\n            <div style={ styles.swatch } onClick={ this.handleClick }>\n              <div style={ styles.color } />\n            </div>\n              { \n                this.state.displayColorPicker ? \n                  <div style={ styles.popover }>\n                    <div style={ styles.cover } onClick={ this.handleClose }/>\n                    <SketchPicker color={ this.state.color } onChange={ this.handleChange } />\n                  </div> \n                  : null \n              } \n          </Navbar>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}